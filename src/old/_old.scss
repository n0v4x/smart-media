$predefined-media-expressions: (
  tablet: width gt 800px,
);

$media-comparison-operators: (
  ">",
  ">=",
  "<",
  "<=",
  "==",
  "lt",
  "le",
  "gt",
  "ge",
  "eq"
);
$media-logical-operators: ("or", "and");

@function parse-media-query($expression) {
  $media-query: null;

  @if type-of($expression) == "list" {
    $media-feature-name: nth($expression, 1);
    $media-feature-value: null;
    $comparison-operator: null;

    @if length($expression) == 3 {
      $comparison-operator: nth($expression, 2);
      $media-feature-value: nth($expression, 3);

      @if not is-valid-comparison-operator($comparison-operator) {
        @error "Comparison operator '#{$comparison-operator}' is not valid";
      }

      @if is-range-media-feature($media-feature-name) {
        $media-feature-name: normalize-range-media-feature-name(
          $comparison-operator,
          $media-feature-name
        );
      } @else {
        @if index(("==", "eq"), $comparison-operator) == null {
          @error "Media feature is not range type (doesn't have min/max prefix)";
        }
      }
    } @else if length($expression) == 2 {
      $media-feature-value: nth($expression, 2);
    } @else if length($expression) == 1 {
      @return parse-media-query(nth($expression, 1));
    }

    @return "(#{$media-feature-name}: #{$media-feature-value})";
  } @else if type-of($expression) == "string" {
    $predefined-media-expression: map-get(
      $predefined-media-expressions,
      $expression
    );

    @if $predefined-media-expression == null {
      @return $expression;
    }

    @return parse-media-query($predefined-media-expression);
  } @else {
    @error "Type error: expression '#{$expression}' should be list or string type";
  }
}
