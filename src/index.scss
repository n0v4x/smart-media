$predefined-media-expressions: (
  tablet: width gt 800px,
);

$media-comparison-operators: (
  ">",
  ">=",
  "<",
  "<=",
  "==",
  "lt",
  "le",
  "gt",
  "ge",
  "eq"
);
$media-logical-operators: ("or", "and");

$MEDIA_RANGE_FEATURES: (
  "width",
  "height",
  "device-width",
  "device-height",
  "aspect-ratio",
  "device-aspect-ratio" "color",
  "color-index",
  "monochrome",
  "resolution"
);

@function media-parse-expression($expression) {
}

@function is-valid-comparison-operator($comparison-operator) {
  @return index($media-comparison-operators, $comparison-operator) != null;
}

@function is-range-media-feature-name($feature-name) {
  @return index($MEDIA_RANGE_FEATURES, $feature-name) != null;
}

// $LESS_OPERATOR_SIGNS: ("<", "lt");
// $LESS_GRATER_SIGNS: ()

@function get-range-media-feature-prefix($comparison-operator) {
  @if index(("<", "<=", "lt", "le"), $comparison-operator) != null {
    @return "max-";
  } @else if index((">", ">=", "gt", "ge"), $comparison-operator) != null {
    @return "min-";
  }

  @return "";
}

@function normalize-media-feature-value($comparison-operator, $value) {
  @if index((">", "gt"), $comparison-operator) != null {
    @return $value + 1px;
  } @else if index(("<", "lt"), $comparison-operator) != null {
    @return $value - 1px;
  }

  @return $value;
}

@function normalize-range-media-feature-name(
  $comparison-operator,
  $media-feature-name
) {
  $media-feature-name-prefix: get-range-media-feature-prefix(
    $comparison-operator
  );

  @return "#{$media-feature-name-prefix}#{$media-feature-name}";
}

@function has-list($list) {
  @each $list-item in $list {
    @if type-of($list-item) == "list" {
      @return true;
    }
  }

  @return false;
}

@function parse-expression($expressions...) {
  @if (has-list($conditions)) {
  } @else {
  }
}

@function get-expression-feature-name($expression) {
  @if length($expression) == 3 {
  }
}

@function parse-media-query($expression) {
  $media-query: null;

  // @debug "------------------------------------";
  @debug type-of($value: $expression);

  @if type-of($expression) == "list" {
    $media-feature-name: nth($expression, 1);
    $media-feature-value: null;
    $comparison-operator: null;

    @if length($expression) == 3 {
      $comparison-operator: nth($expression, 2);
      $media-feature-value: nth($expression, 3);

      @if not is-valid-comparison-operator($comparison-operator) {
        @error "Comparison operator '#{$comparison-operator}' is not valid";
      }

      @if is-range-media-feature-name($media-feature-name) {
        $media-feature-name: normalize-range-media-feature-name(
          $comparison-operator,
          $media-feature-name
        );
      } @else {
        @if index(("==", "eq"), $comparison-operator) == null {
          @error "Media feature is not range type (doesn't have min/max prefix)";
        }
      }
    } @else if length($expression) == 2 {
      $media-feature-value: nth($expression, 2);
    } @else if length($expression) == 1 {
      @return parse-media-query(nth($expression, 1));
    }

    @return "(#{$media-feature-name}: #{$media-feature-value})";
  } @else if type-of($expression) == "string" {
    $predefined-media-expression: map-get(
      $predefined-media-expressions,
      $expression
    );

    @if $predefined-media-expression == null {
      @return $expression;
    }

    @return parse-media-query($predefined-media-expression);
  } @else {
    @error "Type error: expression '#{$expression}' should be list or string type";
  }
}

@mixin media($expressions...) {
  $media-queries: null;

  @each $expression in $expressions {
    $media-queries: append($media-queries, parse-media-query($expression));
  }

  @media #{$media-queries} {
    @content;
  }
}
// @debug index($media-comparison-operators, "<");
@include media(tablet) {
  .test {
    color: red;
  }
}
