$predefined-media-expressions: (
  tablet: width gt 800px,
);

$media-comparison-operators: (
  ">",
  ">=",
  "<",
  "<=",
  "==",
  "lt",
  "le",
  "gt",
  "ge",
  "eq"
);
$media-logical-operators: ("or", "and");

$LT_OP: "<";
$GT_OP: ">";
$GE_OP: ">=";
$LE_OP: "<=";
$EQ_OP: "==";
$AND_OP: "and";
$OR_OP: "or";

$OPERATORS_PRECEDENCES: (
  $OR_OP: 0,
  $AND_OP: 1,
  $LT_OP: 2,
  $GT_OP: 2,
  $GE_OP: 2,
  $LE_OP: 2,
  $EQ_OP: 2,
);

$OPERATORS_WITH_TWO_OPERANDS: ($LT_OP, $GT_OP, $GE_OP, $LE_OP, $AND_OP, $OR_OP);

$COMPARISON_OPERATORS: ($LT_OP, $GT_OP, $GE_OP, $LE_OP, $EQ_OP);

$LOGICAL_OPERATORS: ($AND_OP, $OR_OP);

$OPERATORS: join((), $LT_OP $GT_OP $GE_OP $LE_OP $EQ_OP $AND_OP $OR_OP, comma);

$MEDIA_RANGE_FEATURES: (
  "width",
  "height",
  "device-width",
  "device-height",
  "aspect-ratio",
  "device-aspect-ratio" "color",
  "color-index",
  "monochrome",
  "resolution"
);

$MEDIA_FEATURES: join((), $MEDIA_RANGE_FEATURES, comma);

@function is-media-feature($maybe-media-feature) {
  @return index($MEDIA_FEATURES, $maybe-media-feature) != null;
}

@function is-range-media-feature($maybe-range-media-feature) {
  @return index($MEDIA_RANGE_FEATURES, $maybe-range-media-feature) != null;
}

@function is-operator($maybe-operator) {
  @return index($OPERATORS, $maybe-operator) != null;
}

@function is-operator-have-two-operands($operator) {
  @return index($OPERATORS_WITH_TWO_OPERANDS, $operator) != null;
}

@function is-comparison-operator($maybe-comparison-operator) {
  @return index($COMPARISON_OPERATORS, $maybe-comparison-operator);
}

@function is-logical-operator($maybe-logical-operator) {
  @return index($LOGICAL_OPERATORS, $maybe-logical-operator);
}

@function get-operator-precedence($operator) {
  @if not is-operator($operator) {
    @error '"#{$operator}" is not an operator';
  }

  @return map-get($OPERATORS_PRECEDENCES, $operator);
}

@function push($list, $item, $separator: list-separator($list)) {
  @return append($list, $item, $separator);
}

@function pop($list) {
  $result: ();
  $separator: list-separator($list);

  @if length($list) > 1 {
    @for $i from 1 through length($list) - 1 {
      $result: append($result, nth($list, $i), $separator);
    }
  }

  @return $result;
}

@function last($list) {
  $last-index: length($list);

  @if $last-index < 1 {
    @return null;
  }

  @return nth($list, $last-index);
}

@function reverse($list, $separator: list-separator($list)) {
  $result: ();
  $list-length: length($list);

  @if $list-length > 1 {
    @for $i from $list-length through 1 {
      $result: push($result, nth($list, $i), $separator);
    }
  } @else {
    $result: $list;
  }

  @return $result;
}

@function media-parse-expression($expression) {
}

@function is-valid-comparison-operator($comparison-operator) {
  @return index($media-comparison-operators, $comparison-operator) != null;
}

// $LESS_OPERATOR_SIGNS: ("<", "lt");
// $LESS_GRATER_SIGNS: ()

@function get-range-media-feature-prefix($comparison-operator) {
  @if index(("<", "<=", "lt", "le"), $comparison-operator) != null {
    @return "max-";
  } @else if index((">", ">=", "gt", "ge"), $comparison-operator) != null {
    @return "min-";
  }

  @return "";
}

@function normalize-range-media-feature-value($comparison-operator, $value) {
  @if index((">", "gt"), $comparison-operator) != null {
    @return $value + 1;
  } @else if index(("<", "lt"), $comparison-operator) != null {
    @return $value - 1;
  }

  @return $value;
}

@function normalize-range-media-feature-name(
  $comparison-operator,
  $media-feature-name
) {
  $media-feature-name-prefix: get-range-media-feature-prefix(
    $comparison-operator
  );

  @return "#{$media-feature-name-prefix}#{$media-feature-name}";
}

@function has-list($list) {
  @each $list-item in $list {
    @if type-of($list-item) == "list" {
      @return true;
    }
  }

  @return false;
}

@function parse-expression($expressions...) {
  @if (has-list($conditions)) {
  } @else {
  }
}

@function get-expression-feature-name($expression) {
  @if length($expression) == 3 {
  }
}

@function normalize-infix($infix) {
  $result: ();

  @each $item in $infix {
    @if type-of($item) == "list" {
      $result: push($result, "(");

      @each $sub-item in normalize-infix($item) {
        $result: push($result, $sub-item);
      }

      $result: push($result, ")");
    } @else {
      $result: push($result, $item);
    }
  }

  @return $result;
}

@function to-postfix($infix-list) {
  $normalized-infix-list: normalize-infix($infix-list);
  $postfix: ();
  $operators-stack: ();

  @each $item in $normalized-infix-list {
    @if (is-operator($item)) {
      $operator-1: $item;
      $operator-2: last($operators-stack);

      @while (
        is-operator($operator-2) and
          (
            get-operator-precedence($operator-1) <=
              get-operator-precedence($operator-2)
          )
      ) {
        $postfix: push($postfix, $operator-2);
        $operators-stack: pop($operators-stack);
        $operator-2: last($operators-stack);
      }

      $operators-stack: push($operators-stack, $operator-1);
    } @else if $item == "(" {
      $operators-stack: push($operators-stack, $item);
    } @else if $item == ")" {
      @while last($operators-stack) != "(" {
        $postfix: push($postfix, last($operators-stack));
        $operators-stack: pop($operators-stack);
      }

      // remove ")"
      $operators-stack: pop($operators-stack);
    } @else {
      $postfix: push($postfix, $item);
    }

    @debug $operators-stack $postfix;
  }

  @each $operator in reverse($operators-stack) {
    $postfix: push($postfix, $operator);
  }

  @return $postfix;
}

// @function enclose-plain-media-feature-in-parentheses($name, $value) {
//   @return '(#{$name}: #{$value})'
// }

@function postfix-to-media-queries($postfix) {
  $operands-stack: ();
  $media-queries: ();

  @each $item in $postfix {
    @if (is-operator($item)) {
      $operator: $item;
      $operand-1: last($operands-stack);
      $operands-stack: pop($operands-stack);
      $operand-2: last($operands-stack);
      $operands-stack: pop($operands-stack);

      // @debug $operand-1 $operand-2;

      @if is-comparison-operator($operator) {
        $media-feature: $operand-2;
        $media-feature-value: $operand-1;

        @if is-media-feature($media-feature-value) {
          $temp: $media-feature;
          $media-feature: $media-feature-value;
          $media-feature-value: $temp;
        }

        @if (is-range-media-feature($media-feature)) {
          $media-feature: normalize-range-media-feature-name(
            $operator,
            $media-feature
          );
          $media-feature-value: normalize-range-media-feature-value(
            $operator,
            $media-feature-value
          );
        }

        $media-query: "(#{$media-feature}: #{$media-feature-value})";

        // @debug $operand-1 $operand-1 $operator;
        $operands-stack: push($operands-stack, $media-query);

        // } @else {
        //   @error 'Comparison operator "#{$operator}" should have 2 operands, ' +
        //     'but got 1 "#{if($operand-1, $operand-1, $operand-2)}"';
        // }
      } @else if is-logical-operator($operator) {
        @if $operator == $AND_OP {
          $operands-stack: push(
            $operands-stack,
            "#{$operand-2} and #{$operand-1}"
          );
        } @else if $operator == $OR_OP {
          $operands-stack: push(
            $operands-stack,
            "#{$operand-2}, #{$operand-1}"
          );
          // $operands-stack: push($operands-stack, $operand-2);
          // $operands-stack: push($operands-stack, $operand-1);
        }
      } @else {
        @error 'Unknown operator: "#{$item}"';
      }
    } @else {
      $operands-stack: push($operands-stack, $item);
    }
  }

  @return $operands-stack;
}

@function parse-media-query($expression) {
  $media-query: null;

  // @debug "------------------------------------";
  @debug type-of($value: $expression);

  @if type-of($expression) == "list" {
    $media-feature-name: nth($expression, 1);
    $media-feature-value: null;
    $comparison-operator: null;

    @if length($expression) == 3 {
      $comparison-operator: nth($expression, 2);
      $media-feature-value: nth($expression, 3);

      @if not is-valid-comparison-operator($comparison-operator) {
        @error "Comparison operator '#{$comparison-operator}' is not valid";
      }

      @if is-range-media-feature($media-feature-name) {
        $media-feature-name: normalize-range-media-feature-name(
          $comparison-operator,
          $media-feature-name
        );
      } @else {
        @if index(("==", "eq"), $comparison-operator) == null {
          @error "Media feature is not range type (doesn't have min/max prefix)";
        }
      }
    } @else if length($expression) == 2 {
      $media-feature-value: nth($expression, 2);
    } @else if length($expression) == 1 {
      @return parse-media-query(nth($expression, 1));
    }

    @return "(#{$media-feature-name}: #{$media-feature-value})";
  } @else if type-of($expression) == "string" {
    $predefined-media-expression: map-get(
      $predefined-media-expressions,
      $expression
    );

    @if $predefined-media-expression == null {
      @return $expression;
    }

    @return parse-media-query($predefined-media-expression);
  } @else {
    @error "Type error: expression '#{$expression}' should be list or string type";
  }
}

@mixin media($expressions...) {
  $media-queries: null;

  @each $expression in $expressions {
    $media-queries: append($media-queries, parse-media-query($expression));
  }

  @media #{$media-queries} {
    @content;
  }
}

@debug $OPERATORS_PRECEDENCES;

// width "<=" 500px "and" (width "<=" 1000px "or" width "<=" 600px) "and" width
// "<=" 500px
.debug {
  $list: 1 2 3 4 5 6;
  $number: 5;
  list: $list;
  pop: pop((1 2));
  push: push((), 3);
  last: last((1));
  test: index($number, 5);
  operators: $OPERATORS;
  before-reverse: 1 2 3, 4 5;
  after-reverse: reverse((1 2 3, 4 5));
  infix: (width "<=" 500px "or" width "<=" 1000px "or" width "<=" 600px);
  posfix: to-postfix(
    width "<=" 500px "and" width "<=" 1000px "or" width "<=" 600px
  );
  media-query: postfix-to-media-queries(
    to-postfix(
      width "<=" 500px "and" width "<=" 1000px "or"
        (width "<=" 600px "or" hover)
    )
  );
  normalized-inifix: normalize-infix(
    (width "<=" 500px "or" width "<=" 1000px) "and" width "<=" 600px
  );
}
// 1
// width "<=" 500px "or" width "<=" 1000px "and" width "<=" 600px
// =>
// (min-width: 500px), (win-width: 1000px) and (min-width: 600px)

// 2
// width "<=" 500px "and" width "<=" 1000px "or" width "<=" 600px "and" width "<=" 500px
// =>
// (min-width: 500px) and (win-width: 1000px), (win-width: 600px) and (min-width: 600)

// 3
// width "<=" 500px "and" ( width "<=" 1000px "or" width "<=" 600px ) "and" width "<=" 500px
// =>
// (min-width: 500px) and (win-width: 1000px), (win-width: 600px) and (min-width: 600)

// @debug index($media-comparison-operators, "<");
// @include media(desktop) {
//   .test {
//     color: red;
//   }
// }

$media-queries: "(min-width: 500px) and (min-width: 600px)",
  "(min-width: 700px)";

@media #{postfix-to-media-queries(
    to-postfix(
      width "<=" 500px "and" (width "<=" 1000px "or"
        width "<=" 600px) "or" hover
    )
  )} {
  .test {
    hello: test;
  }
}
